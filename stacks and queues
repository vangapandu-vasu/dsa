📚 STACKS AND QUEUES IN JAVA

Step 1: Concepts
📦 Stack: LIFO (Last-In, First-Out)
→ Think: Undo operations, parentheses matching

📬 Queue: FIFO (First-In, First-Out)
→ Think: Task scheduling, printer queue

📦 STACK
🧠 Concept:
Stack is a LIFO structure (Last In, First Out). Think of a stack of plates — the last one you put on is the first you take off.
import java.util.Stack;

Stack<Integer> stack = new Stack<>();

// Push elements
stack.push(10);

// Pop element
int popped = stack.pop();

// Peek (top element without removing)
int top = stack.peek();

// Check if empty
boolean empty = stack.isEmpty();

📬 QUEUE
🧠 Concept:
Queue is a FIFO structure (First In, First Out). Think of a line at a ticket counter — the first person in is served first.

import java.util.Queue;
import java.util.LinkedList;

Queue<Integer> queue = new LinkedList<>();

// Enqueue
queue.offer(10);

// Dequeue
int front = queue.poll();

// Peek (front element without removing)
int peek = queue.peek();

// Check if empty
boolean empty = queue.isEmpty();
Note: LinkedList is used to implement Queue as Java doesn't allow direct instantiation of Queue (it’s an interface).

✅ ROADMAP: STACK AND QUEUE PROBLEMS TO SOLVE
🔁 STACK PROBLEMS (Easy → Medium)
Valid Parentheses (LeetCode 20)

Min Stack (LeetCode 155)

Implement Stack using Queues (LeetCode 225)

Next Greater Element I (LeetCode 496)

Remove All Adjacent Duplicates in String (LeetCode 1047)

Daily Temperatures (LeetCode 739)

Asteroid Collision (LeetCode 735)
